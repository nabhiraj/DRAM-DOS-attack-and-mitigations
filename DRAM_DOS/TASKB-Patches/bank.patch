diff -Naur ./ChampSim_original/inc/dram_controller.h ./ChampSim/inc/dram_controller.h
--- ./ChampSim_original/inc/dram_controller.h	2018-11-26 20:59:56.496120786 +0530
+++ ./ChampSim/inc/dram_controller.h	2018-11-27 22:09:56.148354000 +0530
@@ -95,7 +95,7 @@
 
     uint32_t dram_get_channel(uint64_t address),
              dram_get_rank   (uint64_t address),
-             dram_get_bank   (uint64_t address),
+             dram_get_bank   (uint64_t address,uint32_t cpu),
              dram_get_row    (uint64_t address),
              dram_get_column (uint64_t address),
              drc_check_hit (uint64_t address, uint32_t cpu, uint32_t channel, uint32_t rank, uint32_t bank, uint32_t row);
diff -Naur ./ChampSim_original/inc/dram_controller.h.orig ./ChampSim/inc/dram_controller.h.orig
--- ./ChampSim_original/inc/dram_controller.h.orig	1970-01-01 05:30:00.000000000 +0530
+++ ./ChampSim/inc/dram_controller.h.orig	2018-11-27 22:07:31.812349745 +0530
@@ -0,0 +1,108 @@
+#ifndef DRAM_H
+#define DRAM_H
+
+#include "memory_class.h"
+
+// DRAM configuration
+#define DRAM_CHANNEL_WIDTH 8 // 8B
+#define DRAM_WQ_SIZE 48
+#define DRAM_RQ_SIZE 48
+
+#define tRP_DRAM_CYCLE  11 
+#define tRCD_DRAM_CYCLE 11
+#define tCAS_DRAM_CYCLE 11
+
+// the data bus must wait this amount of time when switching between reads and writes, and vice versa
+#define DRAM_DBUS_TURN_AROUND_TIME ((15*CPU_FREQ)/2000) // 7.5 ns 
+extern uint32_t DRAM_MTPS, DRAM_DBUS_RETURN_TIME;
+
+// these values control when to send out a burst of writes
+#define DRAM_WRITE_HIGH_WM    (DRAM_WQ_SIZE*3/4)
+#define DRAM_WRITE_LOW_WM     (DRAM_WQ_SIZE*1/4)
+#define MIN_DRAM_WRITES_PER_SWITCH (DRAM_WQ_SIZE*1/4)
+
+// DRAM
+class MEMORY_CONTROLLER : public MEMORY {
+  public:
+    const string NAME;
+
+    DRAM_ARRAY dram_array[DRAM_CHANNELS][DRAM_RANKS][DRAM_BANKS];
+    uint64_t dbus_cycle_available[DRAM_CHANNELS], dbus_cycle_congested[DRAM_CHANNELS], dbus_congested[NUM_TYPES+1][NUM_TYPES+1];
+    uint64_t bank_cycle_available[DRAM_CHANNELS][DRAM_RANKS][DRAM_BANKS];
+    uint8_t  do_write, write_mode[DRAM_CHANNELS]; 
+    uint32_t processed_writes, scheduled_reads[DRAM_CHANNELS], scheduled_writes[DRAM_CHANNELS];
+    int fill_level;
+
+    BANK_REQUEST bank_request[DRAM_CHANNELS][DRAM_RANKS][DRAM_BANKS];
+
+    // queues
+    PACKET_QUEUE WQ[DRAM_CHANNELS], RQ[DRAM_CHANNELS];
+
+    // constructor
+    MEMORY_CONTROLLER(string v1) : NAME (v1) {
+        for (uint32_t i=0; i<NUM_TYPES+1; i++) {
+            for (uint32_t j=0; j<NUM_TYPES+1; j++) {
+                dbus_congested[i][j] = 0;
+            }
+        }
+        do_write = 0;
+        processed_writes = 0;
+        for (uint32_t i=0; i<DRAM_CHANNELS; i++) {
+            dbus_cycle_available[i] = 0;
+            dbus_cycle_congested[i] = 0;
+            write_mode[i] = 0;
+            scheduled_reads[i] = 0;
+            scheduled_writes[i] = 0;
+
+            for (uint32_t j=0; j<DRAM_RANKS; j++) {
+                for (uint32_t k=0; k<DRAM_BANKS; k++)
+                    bank_cycle_available[i][j][k] = 0;
+            }
+
+            WQ[i].NAME = "DRAM_WQ" + to_string(i);
+            WQ[i].SIZE = DRAM_WQ_SIZE;
+            WQ[i].entry = new PACKET [DRAM_WQ_SIZE];
+
+            RQ[i].NAME = "DRAM_RQ" + to_string(i);
+            RQ[i].SIZE = DRAM_RQ_SIZE;
+            RQ[i].entry = new PACKET [DRAM_RQ_SIZE];
+        }
+
+        fill_level = FILL_DRAM;
+    };
+
+    // destructor
+    ~MEMORY_CONTROLLER() {
+
+    };
+
+    // functions
+    int  add_rq(PACKET *packet),
+         add_wq(PACKET *packet),
+         add_pq(PACKET *packet);
+
+    void return_data(PACKET *packet),
+         operate(),
+         increment_WQ_FULL(uint64_t address);
+
+    uint32_t get_occupancy(uint8_t queue_type, uint64_t address),
+             get_size(uint8_t queue_type, uint64_t address);
+
+    void schedule(PACKET_QUEUE *queue), process(PACKET_QUEUE *queue),
+         update_schedule_cycle(PACKET_QUEUE *queue),
+         update_process_cycle(PACKET_QUEUE *queue),
+         reset_remain_requests(PACKET_QUEUE *queue, uint32_t channel);
+
+    uint32_t dram_get_channel(uint64_t address),
+             dram_get_rank   (uint64_t address,uint32_t cpu),
+             dram_get_bank   (uint64_t address,uint32_t cpu),
+             dram_get_row    (uint64_t address),
+             dram_get_column (uint64_t address),
+             drc_check_hit (uint64_t address, uint32_t cpu, uint32_t channel, uint32_t rank, uint32_t bank, uint32_t row);
+
+    uint64_t get_bank_earliest_cycle();
+
+    int check_dram_queue(PACKET_QUEUE *queue, PACKET *packet);
+};
+
+#endif
diff -Naur ./ChampSim_original/inc/dram_controller.h.rej ./ChampSim/inc/dram_controller.h.rej
--- ./ChampSim_original/inc/dram_controller.h.rej	1970-01-01 05:30:00.000000000 +0530
+++ ./ChampSim/inc/dram_controller.h.rej	2018-11-27 22:07:31.812349745 +0530
@@ -0,0 +1,11 @@
+--- inc/dram_controller.h	2018-11-26 20:59:56.496120786 +0530
++++ inc/dram_controller.h	2018-11-22 20:14:29.515049000 +0530
+@@ -95,7 +95,7 @@
+ 
+     uint32_t dram_get_channel(uint64_t address),
+              dram_get_rank   (uint64_t address),
+-             dram_get_bank   (uint64_t address),
++             dram_get_bank   (uint64_t address,uint32_t cpu),
+              dram_get_row    (uint64_t address),
+              dram_get_column (uint64_t address),
+              drc_check_hit (uint64_t address, uint32_t cpu, uint32_t channel, uint32_t rank, uint32_t bank, uint32_t row);
diff -Naur ./ChampSim_original/src/dram_controller.cc ./ChampSim/src/dram_controller.cc
--- ./ChampSim_original/src/dram_controller.cc	2018-11-26 20:59:56.500120786 +0530
+++ ./ChampSim/src/dram_controller.cc	2018-11-27 22:13:43.604361000 +0530
@@ -12,8 +12,8 @@
             uint64_t op_addr = queue->entry[i].address;
             uint32_t op_cpu = queue->entry[i].cpu,
                      op_channel = dram_get_channel(op_addr), 
-                     op_rank = dram_get_rank(op_addr), 
-                     op_bank = dram_get_bank(op_addr), 
+                     op_rank = dram_get_rank(op_addr),
+                     op_bank = dram_get_bank(op_addr,op_cpu),
                      op_row = dram_get_row(op_addr);
 
 #ifdef DEBUG_PRINT
@@ -122,12 +122,12 @@
 void MEMORY_CONTROLLER::schedule(PACKET_QUEUE *queue)
 {
     uint64_t read_addr;
-    uint32_t read_channel, read_rank, read_bank, read_row;
+    uint32_t read_channel, read_rank, read_bank, read_row,cpu;
     uint8_t  row_buffer_hit = 0;
 
     int oldest_index = -1;
     uint64_t oldest_cycle = UINT64_MAX;
-
+														//Removed Open page policy as part of PA3
     // first, search for the oldest open row hit
     for (uint32_t i=0; i<queue->SIZE; i++) {
 
@@ -139,10 +139,10 @@
         read_addr = queue->entry[i].address;
         if (read_addr == 0) 
             continue;
-
+        cpu = queue->entry[i].cpu;
         read_channel = dram_get_channel(read_addr);
         read_rank = dram_get_rank(read_addr);
-        read_bank = dram_get_bank(read_addr);
+        read_bank = dram_get_bank(read_addr,cpu);
 
         // bank is busy
         if (bank_request[read_channel][read_rank][read_bank].working) { // should we check this or not? how do we know if bank is busy or not for all requests in the queue?
@@ -168,8 +168,8 @@
             cout << " swrites: " << scheduled_writes[channel] << " sreads: " << scheduled_reads[channel];
             cout << " write: " << +bank_request[read_channel][read_rank][read_bank].is_write << " read: " << +bank_request[read_channel][read_rank][read_bank].is_read << hex;
             cout << " address: " << queue->entry[i].address << dec << " channel: " << read_channel << " rank: " << read_rank << " bank: " << read_bank << endl; });
-            */
 
+			*/
             continue;
         }
 
@@ -196,9 +196,10 @@
                 continue;
 
             // bank is busy
+            cpu = queue->entry[i].cpu;
             read_channel = dram_get_channel(read_addr);
             read_rank = dram_get_rank(read_addr);
-            read_bank = dram_get_bank(read_addr);
+            read_bank = dram_get_bank(read_addr,cpu);
             if (bank_request[read_channel][read_rank][read_bank].working) 
                 continue;
 
@@ -225,8 +226,8 @@
         uint64_t op_addr = queue->entry[oldest_index].address;
         uint32_t op_cpu = queue->entry[oldest_index].cpu,
                  op_channel = dram_get_channel(op_addr), 
-                 op_rank = dram_get_rank(op_addr), 
-                 op_bank = dram_get_bank(op_addr), 
+                 op_rank = dram_get_rank(op_addr),
+                 op_bank = dram_get_bank(op_addr,op_cpu),
                  op_row = dram_get_row(op_addr);
 #ifdef DEBUG_PRINT
         uint32_t op_column = dram_get_column(op_addr);
@@ -282,8 +283,8 @@
     uint64_t op_addr = queue->entry[request_index].address;
     uint32_t op_cpu = queue->entry[request_index].cpu,
              op_channel = dram_get_channel(op_addr), 
-             op_rank = dram_get_rank(op_addr), 
-             op_bank = dram_get_bank(op_addr);
+             op_rank = dram_get_rank(op_addr),
+             op_bank = dram_get_bank(op_addr,op_cpu);
 #ifdef DEBUG_PRINT
     uint32_t op_row = dram_get_row(op_addr), 
              op_column = dram_get_column(op_addr);
@@ -634,14 +635,26 @@
     return (uint32_t) (address >> shift) & (DRAM_CHANNELS - 1);
 }
 
-uint32_t MEMORY_CONTROLLER::dram_get_bank(uint64_t address)
+uint32_t MEMORY_CONTROLLER::dram_get_bank(uint64_t address,uint32_t cpu)
 {
+	uint32_t bank_modified; //Added as part of PA3
     if (LOG2_DRAM_BANKS == 0)
         return 0;
 
     int shift = LOG2_DRAM_CHANNELS;
 
-    return (uint32_t) (address >> shift) & (DRAM_BANKS - 1);
+    bank_modified = (address >> shift) & (DRAM_BANKS - 1); //Added As part of PA3
+        if(cpu==0)
+        	return (uint32_t)(bank_modified%4);
+        if(cpu==1)
+            return uint32_t(bank_modified%4)+4;
+        else
+        {
+        	cout<<"reached else in bank"<<endl;
+        	return (uint32_t) (address >> shift) & (DRAM_BANKS - 1);
+        }
+
+    //return (uint32_t) (address >> shift) & (DRAM_BANKS - 1);
 }
 
 uint32_t MEMORY_CONTROLLER::dram_get_column(uint64_t address)
